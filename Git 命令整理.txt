-------------git---------------------------------
git的作用：
   git 是一个代码管理工具，git 是分布式架构。
   SVN是集中式的。
git的搭建：
   我们直接使用开源代码库，github全球通用的，gitee(码云)。
github 的使用：
   1）创建仓库，个人中心(右上角)->your-repositories->new->
            录入仓库名->选择public(所有人可以下载代码)/private。 
   2）把本地代码传递到远程库中，安装客户端工具gitbrash.
   3）客户端命令
           echo "# 363Demo1" >> README.md  当前路径下创建文件并写入内容。
          git init                                                     创建本地git 库
          git add README.md/git add .               把文件添加到git 库中,"."所有文件。
          git commit -m "first commit"                提交添加备注
          git branch -M main                                切换到主干分支上。
          git remote add origin https://github.com/zhengzhongzhengzhong/363Demo1.git   关联远程仓库
          git push -u origin main                          提交代码到远程仓库
   4）使用其他客户端工具进行代码上传
            【1】去官网下载，可视化的客户端工具。
                   https://git-scm.com/download/gui/windows。
            【2】可以使用idea 自带的git 工具
    5）克隆问题
    git clone 库名
   6）pull 拉取
              git pull https://github.com/zhengzhongzhengzhong/363Demo1.git main
    7）远程仓库有内容后
            先创建数据库，然后拉去内容
            在参照步骤3
            git push --set-upstream origin main   
     8）git pull --rebase origin master  本地代码不是最新代码时使用。
     9)  git config --global user.name "郑忠"
           git config --global user.email "ghaszhengzhong@163.com"
    10) 创建分支git checkout -b 名字 打完分支，把远程代码都合并过来后，更新远程仓库。
                         
-------------------------------------------------------------

错误说明【1】：
      Authentication failed，github 去年9月份，更新了一个token ，来替换账号，密码，有些客户端版本的密码，
      需要去github 获取。
      个人中心-->setting-->develop setting->
      classic
     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
      客户端工具版本兼容问题
错误说明【2】：
 ! [rejected]        master -> master (non-fast-forward)
3.1、先合并之前的历史，再进行提交——提倡使用
（1）先把git的东西fetch到你本地然后merge后再push
$ git fetch origin master
$ git merge origin FETCH_HEAD 
先抓取远程仓库的更新到本地，然后与你的本地仓库合并，
（如果有冲突就要解决冲突后再合并，冲突问题比较复杂，这里就不详细说了），
这样就可以使远程仓库和你本地仓库一致了，然后就可以提交修改了。
（2）这2句命令等价于
$ git pull origin master
但是使用git fetch + git merge 更加安全。
（3）git pull --rebase origin master
重定基，可以是历史更加统一，即使提交历史趋向于一条直线。
补充：他们之间的关系
git pull = git fetch + git merge FETCH_HEAD 
git pull --rebase =  git fetch + git rebase FETCH_HEAD
3.2、丢弃之前的历史，强推——谨慎使用
强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容
$ git push -f  或者 $ git push --force


       